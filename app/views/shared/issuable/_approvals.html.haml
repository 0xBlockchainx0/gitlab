- issuable = local_assigns.fetch(:issuable)
- form = local_assigns.fetch(:form)

- return unless issuable.is_a?(MergeRequest)
- return unless issuable.requires_approve?

- author = issuable.author || current_user
- skip_users = issuable.all_approvers_including_groups + [author]
- skip_groups = issuable.overall_approver_groups.pluck(:group_id)
- approvers_count = issuable.overall_approvers.length + issuable.overall_approver_groups.map { |group| group.users.length }.reduce(:+)

.form-group
  = form.label :approvals_before_merge, class: 'control-label' do
    Approvals required
  .col-sm-10
    = form.number_field :approvals_before_merge, class: 'form-control', value: issuable.approvals_required
    .help-block
      Number of users who need to approve this merge request before it can be accepted.
      If this isn't greater than the project default (#{pluralize(issuable.target_project.approvals_before_merge, 'user')}),
      then it will be ignored and the project default will be used.
.form-group
  = form.label :approver_ids, class: 'control-label' do
    Approvers
  .col-sm-10.token-dropdown
    .token-dropdown-bar
      .scroll-container
        %ul#token-container.token-container
          %li#input-token.input-token
            = hidden_field_tag :approver_token_ids
            = hidden_field_tag :approver_group_token_ids
            = text_field_tag 'approvers-input', nil, placeholder: 'Search for users or groups', class: 'form-control dropdown-toggle', data: { 'dropdown-trigger' => '#approvers-list', 'skip-users' => skip_users, 'skip-groups' => skip_groups, 'email-user' => true, 'endpoint': approvers_namespace_project_merge_request_path(@project.namespace, @project, @merge_request) }
      = button_tag 'Add', class: 'btn btn-success add-approvers'
    %ul#approvers-list.dropdown-menu{ data: { dropdown: true, dynamic: true } }
      %li.droplab-ignore-item Users
      %li{ data: { id: '{{id}}', name: '{{name}}', type: '{{type}}', 'user-count' => '{{user_count}}'} }
        %a {{name}}
      -# %ul
      -#   %li.droplab-ignore-item Groups
      -#   %li {{ name }}
      -#   %li {{ name }}
      -#   %li {{ name }}
    .help-block
      Add a user or group as an approver for this merge request

    = hidden_field :merge_request, :approver_ids
    = hidden_field :merge_request, :approver_group_ids

    .panel.panel-default.prepend-top-10
      .panel-heading
        Approvers
        .badge= approvers_count
      %ul.well-list.approver-list
        - if issuable.all_approvers_including_groups.empty?
          %li.no-approvers There are no approvers
        - else
          - unsaved_approvers = !issuable.approvers_overwritten?
          - item_classes = unsaved_approvers ? ['unsaved-approvers'] : []
          - issuable.overall_approvers.each do |approver|
            %li{ id: dom_id(approver.user), class: item_classes + ['approver'] }
              = link_to approver.user.name, approver.user
              .pull-right
                - if unsaved_approvers
                  = link_to "#", data: { confirm: "Are you sure you want to remove approver #{approver.user.name}"}, class: "btn-xs btn btn-remove remove-approver", title: 'Remove approver' do
                    = icon('trash-o')
                - else
                  = link_to namespace_project_merge_request_approver_path(@project.namespace, @project, issuable, approver), data: { confirm: "Are you sure you want to remove approver #{approver.user.name}"}, method: :delete, class: "btn-xs btn btn-remove remove-approver", title: 'Remove approver' do
                    = icon('trash-o')
          - issuable.overall_approver_groups.each do |approver_group|
            %li{ id: dom_id(approver_group.group), class: item_classes + ['approver-group'] }
              %span.light Group:
              = link_to approver_group.group.name, approver_group.group
              .badge= approver_group.users.length
              .pull-right
                - if unsaved_approvers
                  = link_to "#", data: { confirm: "Are you sure you want to remove group #{approver_group.group.name}"}, class: "btn-xs btn btn-remove remove-approver", title: 'Remove group' do
                    = icon('trash-o')
                - else
                  = link_to namespace_project_merge_request_approver_group_path(@project.namespace, @project, issuable, approver_group), data: { confirm: "Are you sure you want to remove group #{approver_group.group.name}"}, method: :delete, class: "btn-xs btn btn-remove remove-approver", title: 'Remove group' do
                    = icon('trash-o')
    .help-block.suggested-approvers
      - if @suggested_approvers.any?
        Suggested approvers:
        = raw @suggested_approvers.map { |approver| link_to sanitize(approver.name), "#", id: dom_id(approver) }.join(", ")
