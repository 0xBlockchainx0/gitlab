module Issues
  class CreateFromVulnerabilityDataService < ::BaseService
    def execute
      issue_params = {
        title: issue_title(@params),
        description: issue_content(@params)
      }

      issue = Issues::CreateService.new(@project, @current_user, issue_params).execute

      if issue.valid?
        success(issue)
      else
        error(issue.errors)
      end
    end

    private

    def success(issue)
      super().merge(issue: issue)
    end

    def issue_title(params)
      title = case params[:category]
              when 'sast', 'dependency_scanning', 'dast'
                params[:name]
              when 'container_scanning'
                "#{params[:name]} in #{params[:namespace]}"
              end

      "Investigate vulnerability: #{title}"
    end

    def issue_content(params)
      data = case params[:category]
             when 'sast', 'dependency_scanning'
               sast_data(params)
             when 'container_scanning'
               container_scanning_data(params)
             when 'dast'
               dast_data(params)
             end

      render_content data
    end

    def sast_data(params)
      data = { identifiers: [] }
      data[:severity] = params[:severity]
      data[:confidence] = params[:confidence]
      data[:description] = params[:description].presence ||
        params[:name]
      data[:solution] = params[:solution]
      if params[:identifiers].present?
        params[:identifiers].each do |identifier|
          # Only show known identifiers
          case identifier[:name]
          when 'CVE'
            data[:identifiers] << {
              value: identifier[:value],
              link: cve_link(identifier[:value])
            }
          when 'CWE'
            data[:identifiers] << {
              value: "CWE-#{identifier[:value]}",
              link: cwe_link(identifier[:value])
            }
          end
        end
      end

      data
    end

    def container_scanning_data(params)
      data = { identifiers: [] }
      data[:severity] = params[:severity]
      data[:description] = params[:description].presence ||
        "**#{params[:namespace]}** is affected by #{params[:name]}"

      if params[:fixedby].present? &&
          params[:featurename].present? &&
          params[:featureversion].present?

        data[:solution] = "Upgrade **#{params[:featurename]}** from `#{params[:featureversion]}` to `#{params[:fixedby]}`"
      end

      if params[:name].present?
        data[:identifiers] << {
          value: params[:name],
          link: cve_link(params[:name])
        }
      end

      data
    end

    def dast_data(params)
      data = { identifiers: [] }
      data[:severity] = params[:severity]
      data[:confidence] = params[:confidence]
      data[:description] = params[:desc]
      data[:solution] = params[:solution]

      if params[:cweid].present?
        data[:identifiers] << {
          value: "CWE-#{params[:cweid]}",
          link: cwe_link(params[:cweid])
        }
      end

      if params[:wascid].present?
        data[:identifiers] << {
          value: "WASC-#{params[:wascid]}"
        }
      end

      data
    end

    def render_content(data)
      content = "### Description:\n#{data[:description]}\n\n"
      content << "* Severity: #{data[:severity]}\n" if data[:severity].present?
      content << "* Confidence: #{data[:confidence]}\n" if data[:confidence].present?

      content << "\n### Solution:\n#{data[:solution]}\n" if data[:solution].present?

      if data[:identifiers].present?
        content << "\n### Identifiers:\n\n"
        data[:identifiers].each do |identifier|
          content << if identifier[:link].present?
                       "* [#{identifier[:value]}](#{identifier[:link]})\n"
                     else
                       "* #{identifier[:value]}\n"
                     end
        end
      end

      content
    end

    # cve_id must be 'CVE-YYYY-XXXX' (prefix + year + digits)
    def cve_link(cve_id)
      "https://cve.mitre.org/cgi-bin/cvename.cgi?name=#{cve_id}"
    end

    # cve_id must be a number only (no 'CWE-' prefix)
    def cwe_link(cwe_id)
      "https://cwe.mitre.org/data/definitions/#{cwe_id}.html"
    end
  end
end
