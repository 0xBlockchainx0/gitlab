# frozen_string_literal: true

module VulnerabilityFeedback
  class DestroyService < ::BaseService
    def initialize(project, user, vulnerability_feedback)
      @project, @current_user, @vulnerability_feedback = project, user, vulnerability_feedback
    end

    def execute
      # TODO: Add system note when destroying a dismissal feedback
      raise Gitlab::Access::AccessDeniedError unless can?(current_user, :destroy_vulnerability_feedback, @vulnerability_feedback)

      execution_result = @vulnerability_feedback.destroy

      if @vulnerability_feedback.for_dismissal? && Feature.enabled?(:cache_vulnerability_occurrence, @project)
        Gitlab::Vulnerabilities::OccurrenceCache.new(@project, @project.id, @current_user).fetch(force: true)
      end

      execution_result
    end
  end
end
