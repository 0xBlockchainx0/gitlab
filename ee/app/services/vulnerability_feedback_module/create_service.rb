module VulnerabilityFeedbackModule
  class CreateService < ::BaseService
    def execute
      vulnerability_feedback = @project.vulnerability_feedback.new(@params)
      vulnerability_feedback.author = @current_user

      if vulnerability_feedback.issue? # (feedback_type == 'issue')
        return error('vulnerability_data is missing or empty') if vulnerability_feedback.vulnerability_data.blank?

        result = Issues::CreateFromVulnerabilityDataService
          .new(@project, @current_user, vulnerability_feedback.vulnerability_data)
          .execute

        return result if result[:status] == :error

        issue = result[:issue]
        vulnerability_feedback.issue = issue
      end

      if vulnerability_feedback.save
        success(vulnerability_feedback)
      else
        # Rollback created issue
        issue.destroy if issue
        error(vulnerability_feedback.errors)
      end

    rescue ArgumentError => e
      # VulnerabilityFeedback relies on #enum attributes which raise this exception
      error(e.message)
    end

    private

    def success(vulnerability_feedback)
      super().merge(vulnerability_feedback: vulnerability_feedback)
    end
  end
end
