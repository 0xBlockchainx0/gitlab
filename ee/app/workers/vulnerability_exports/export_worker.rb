# frozen_string_literal: true

module VulnerabilityExports
  class ExportWorker
    include ApplicationWorker
    include ::Gitlab::ExclusiveLeaseHelpers

    LEASE_TIMEOUT = 1.hour

    feature_category :vulnerability_management
    worker_resource_boundary :cpu

    idempotent!

    def perform(project_id, vulnerability_export_id)
      project = Project.find_by_id(project_id)
      return unless project

      vulnerability_export = project.vulnerability_exports.find_by_id(vulnerability_export_id)

      return unless vulnerability_export&.created?
      return unless try_obtain_lease_for(project_id, vulnerability_export_id)

      schedule_export_deletion(project_id, vulnerability_export_id)

      vulnerability_export.start!

      vulnerabilities = Security::VulnerabilitiesFinder.new(project).execute

      generate_file_data(vulnerability_export.format, vulnerabilities) do |file|
        vulnerability_export.file = file
        vulnerability_export.file.filename = generate_filename(project, vulnerability_export.format)
        vulnerability_export.finish!
      end
    rescue => error
      logger.error class: self.class.name, message: error.message
      vulnerability_export&.failed!
    end

    private

    def try_obtain_lease_for(project_id, vulnerability_export_id)
      Gitlab::ExclusiveLease
        .new("vulnerability_exports_export:#{project_id}/#{vulnerability_export_id}", timeout: LEASE_TIMEOUT)
        .try_obtain
    end

    def generate_file_data(format, vulnerabilities, &block)
      case format
      when 'csv'
        VulnerabilityExports::ExportCsvService.new(vulnerabilities).csv_data(&block)
      end
    end

    def schedule_export_deletion(project_id, vulnerability_export_id)
      VulnerabilityExports::ExportDeletionWorker.perform_in(1.hour, project_id, vulnerability_export_id)
    end

    def generate_filename(project, format)
      "#{project.full_path.parameterize}_vulnerabilities_#{Time.now.utc.strftime('%FT%H%M')}.#{format}"
    end
  end
end
