# frozen_string_literal: true

module EE
  module Gitlab
    module BackgroundMigration
      # This class creates/updates those project historical vulnerability statistics
      # that haven't been created nor initialized.
      class PopulateVulnerabilityHistoricalStatistics
        def perform(project_ids)
          projects(project_ids).each do |project|
            upsert_vulnerability_historical_statistics(project)
          rescue => e
            error_message("Error updating statistics for project #{project.id}: #{e.message}")
          end
        end

        private

        EMPTY_STATISTIC = {
          total: 0,
          critical: 0,
          high: 0,
          medium: 0,
          low: 0,
          unknown: 0,
          info: 0
        }.freeze

        def projects(project_ids)
          Project
            .has_vulnerabilities
            .where(id: project_ids)
        end

        def upsert_vulnerability_historical_statistics(project)
          end_date = Date.today
          start_date = end_date - ::Vulnerabilities::HistoricalStatistic::RETENTION_PERIOD
          time_now = Time.now

          project
            .vulnerabilities
            .counts_by_day_and_severity(start_date, end_date, validate: false)
            .group_by(&:day)
            .map { |day, statistics| { date: day, total: statistics.sum(&:count), **statistics.map { |statistic| { statistic.severity.to_sym => statistic.count } }.inject(:merge) } }
            .map { |statistic| statistic.reverse_merge(letter_grade: ::Vulnerabilities::Statistic.letter_grade_for(statistic.stringify_keys), created_at: time_now, updated_at: time_now, project_id: project.id, **EMPTY_STATISTIC) }
            .sort_by { |statistic| statistic[:date] }
            .slice_when { |statistic_before, statistic| statistic_before.except(:date) != statistic.except(:date) }
            .map(&:first)
            .then { |statistics| project.vulnerability_historical_statistics.insert_all(statistics) }
        end

        def logger
          @logger ||= Gitlab::BackgroundMigration::Logger.build
        end

        def error_message(message)
          logger.error(message: "Vulnerability Historical Statistics Migration: #{message}")
        end
      end
    end
  end
end
