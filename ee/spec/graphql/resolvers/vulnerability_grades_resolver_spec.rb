# frozen_string_literal: true

require 'spec_helper'

RSpec.describe Resolvers::VulnerabilityGradesResolver do
  include GraphqlHelpers

  describe '#resolve' do
    subject { resolve(described_class, obj: vulnerable, ctx: { current_user: current_user }) }

    let_it_be(:current_user) { create(:user) }

    let_it_be(:group) { create(:group) }
    let_it_be(:project_1) { create(:project, group: group) }
    let_it_be(:project_2) { create(:project, group: group) }

    let_it_be(:vulnerability_statistic_1) { create(:vulnerability_statistic, :a, project: project_1) }
    let_it_be(:vulnerability_statistic_2) { create(:vulnerability_statistic, :b, project: project_2) }

    context 'when the given vulnerable is a Group' do
      let(:vulnerable) { group }

      specify do
        expect(subject).to contain_exactly(
          have_attributes(grade: 'a', projects: contain_exactly(project_1)),
          have_attributes(grade: 'b', projects: contain_exactly(project_2))
        )
      end
    end

    context 'when the given vulnerable is an InstanceSecurityDashboard' do
      let(:vulnerable) { InstanceSecurityDashboard.new(current_user) }
      let(:expected_projects_grades) do
        [
          ['a', [project_1.id]]
        ]
      end

      before do
        project_1.add_developer(current_user)
        current_user.security_dashboard_projects << project_1
      end

      it { is_expected.to eq(expected_projects_grades) }
    end
  end
end
