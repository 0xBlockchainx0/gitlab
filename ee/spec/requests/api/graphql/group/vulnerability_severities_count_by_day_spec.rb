# frozen_string_literal: true

require 'spec_helper'

RSpec.describe 'group(fullPath).vulnerabilitiesCountByDayAndSeverity' do
  include GraphqlHelpers

  let_it_be(:group) { create(:group) }
  let_it_be(:project) { create(:project, namespace: group) }
  let_it_be(:current_user) { create(:user) }

  let(:query) { graphql_query_for(:group, { fullPath: group.full_path }, history_field) }
  let(:query_result) { graphql_data.dig('group', 'vulnerabilitiesCountByDayAndSeverity', 'nodes') }

  let(:history_field) do
    query_graphql_field(
      :vulnerabilitiesCountByDayAndSeverity,
      {
        start_date: Date.parse('2019-10-15').iso8601,
        end_date: Date.parse('2019-10-21').iso8601
      },
      history_fields
    )
  end

  let(:history_fields) do
    query_graphql_field(:nodes, nil, <<~FIELDS)
      count
      day
      severity
    FIELDS
  end

  it "fetches historical vulnerability data from the start date to the end date for projects in the group and its subgroups" do
    Timecop.freeze(Time.zone.parse('2019-10-31')) do
      project.add_developer(current_user)

      create(:vulnerability_historical_statistic, date: 15.days.ago, critical: 1, high: 1, project: project)
      create(:vulnerability_historical_statistic, date: 14.days.ago, critical: 0, high: 1, project: project)
      create(:vulnerability_historical_statistic, date: 13.days.ago, critical: 2, high: 0, project: project)
      create(:vulnerability_historical_statistic, date: 12.days.ago, critical: 3, high: 2, project: project)

      post_graphql(query, current_user: current_user)

      expect(query_result).to eq([
        { 'count' => 1, 'day' => '2019-10-16', 'severity' => 'CRITICAL' },
        { 'count' => 1, 'day' => '2019-10-16', 'severity' => 'HIGH' },
        { 'count' => 0, 'day' => '2019-10-16', 'severity' => 'INFO' },
        { 'count' => 0, 'day' => '2019-10-16', 'severity' => 'LOW' },
        { 'count' => 0, 'day' => '2019-10-16', 'severity' => 'MEDIUM' },
        { 'count' => 0, 'day' => '2019-10-16', 'severity' => 'UNKNOWN' },
        { 'count' => 0, 'day' => '2019-10-17', 'severity' => 'CRITICAL' },
        { 'count' => 1, 'day' => '2019-10-17', 'severity' => 'HIGH' },
        { 'count' => 0, 'day' => '2019-10-17', 'severity' => 'INFO' },
        { 'count' => 0, 'day' => '2019-10-17', 'severity' => 'LOW' },
        { 'count' => 0, 'day' => '2019-10-17', 'severity' => 'MEDIUM' },
        { 'count' => 0, 'day' => '2019-10-17', 'severity' => 'UNKNOWN' },
        { 'count' => 2, 'day' => '2019-10-18', 'severity' => 'CRITICAL' },
        { 'count' => 0, 'day' => '2019-10-18', 'severity' => 'HIGH' },
        { 'count' => 0, 'day' => '2019-10-18', 'severity' => 'INFO' },
        { 'count' => 0, 'day' => '2019-10-18', 'severity' => 'LOW' },
        { 'count' => 0, 'day' => '2019-10-18', 'severity' => 'MEDIUM' },
        { 'count' => 0, 'day' => '2019-10-18', 'severity' => 'UNKNOWN' },
        { 'count' => 3, 'day' => '2019-10-19', 'severity' => 'CRITICAL' },
        { 'count' => 2, 'day' => '2019-10-19', 'severity' => 'HIGH' },
        { 'count' => 0, 'day' => '2019-10-19', 'severity' => 'INFO' },
        { 'count' => 0, 'day' => '2019-10-19', 'severity' => 'LOW' },
        { 'count' => 0, 'day' => '2019-10-19', 'severity' => 'MEDIUM' },
        { 'count' => 0, 'day' => '2019-10-19', 'severity' => 'UNKNOWN' }
      ])
    end
  end
end
